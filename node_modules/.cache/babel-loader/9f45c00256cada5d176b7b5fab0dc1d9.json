{"ast":null,"code":"import _defineProperty from \"/Users/loremenius/Documents/Git/familiy-wishlist/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/loremenius/Documents/Git/familiy-wishlist/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/loremenius/Documents/Git/familiy-wishlist/src/components/Login.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { loginUser, setError } from '../redux/actions/LoginRegisterActions';\nimport { Link } from \"react-router-dom\";\n\nconst Login = ({\n  loginUser,\n  history,\n  error,\n  setError\n}) => {\n  const _useState = useState({\n    username: \"\",\n    password: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        user = _useState2[0],\n        setUser = _useState2[1];\n\n  const onChange = e => {\n    setUser(_objectSpread({}, user, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault(); // set error to empty string\n\n    setError(''); // check to make sure all fields are filled out\n\n    if (!!user.username && !!user.password) {\n      // call action to send data to back-end.\n      loginUser(user, history); // if not all fields are filled out. change error to display it. \n    } else {\n      setError('All fields are required');\n    }\n  };\n\n  const displayError = () => {\n    // if the error is not an empty string: create a paragraph to disaply it.\n    if (!!error) return React.createElement(\"p\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, error); // if error is a empty string: create empty paragraph.\n    else return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Please Login\"), React.createElement(\"form\", {\n    className: \"loginForm\",\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Username:\"), React.createElement(\"input\", {\n    type: \"text\",\n    value: user.username,\n    name: \"username\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Password:\"), React.createElement(\"input\", {\n    type: \"password\",\n    value: user.password,\n    name: \"password\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \" Login \"), displayError()), React.createElement(Link, {\n    to: \"/register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Register new user\"));\n};\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.loginReducer.isFetching,\n    error: state.loginReducer.error\n  };\n}\n\nexport default connect(mapStateToProps, {\n  loginUser,\n  setError\n})(Login);","map":{"version":3,"sources":["/Users/loremenius/Documents/Git/familiy-wishlist/src/components/Login.js"],"names":["React","useState","connect","loginUser","setError","Link","Login","history","error","username","password","user","setUser","onChange","e","target","name","value","onSubmit","preventDefault","displayError","mapStateToProps","state","isFetching","loginReducer"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport { connect } from \"react-redux\";\nimport { loginUser, setError } from '../redux/actions/LoginRegisterActions';\nimport { Link } from \"react-router-dom\";\n\nconst Login = ({ loginUser, history, error, setError }) =>{\n    const [user, setUser] = useState({username:\"\", password:\"\"});\n    const onChange = (e) =>{\n        setUser({\n            ...user,\n            [e.target.name]:e.target.value\n        })\n    }\n\n    const onSubmit = (e) =>{\n        e.preventDefault();\n        // set error to empty string\n        setError('');\n        // check to make sure all fields are filled out\n        if(!!user.username && !!user.password){\n                // call action to send data to back-end.\n                loginUser(user, history);\n        // if not all fields are filled out. change error to display it. \n        }else{\n            setError('All fields are required');\n        }\n    }\n\n    const displayError = () =>{\n        // if the error is not an empty string: create a paragraph to disaply it.\n        if(!!error) return (<p className='error'>{error}</p>)\n        // if error is a empty string: create empty paragraph.\n        else return (<p></p>)\n    }\n\n    return (\n\n        <div className = \"login\">\n            <h2>Please Login</h2>\n            <form className = \"loginForm\" onSubmit={onSubmit}>\n                <label>\n                    <p>Username:</p>\n                    <input \n                        type=\"text\" \n                        value = {user.username} \n                        name=\"username\" \n                        onChange={onChange}\n                    />\n                </label>\n                <label>\n                    <p>Password:</p>\n                    <input \n                        type=\"password\"\n                        value={user.password} \n                        name = \"password\" \n                        onChange={onChange}\n                    />\n                </label>\n                <button> Login </button>\n                {displayError()}\n            </form>\n            <Link to='/register'>Register new user</Link>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n      isFetching: state.loginReducer.isFetching,\n      error: state.loginReducer.error\n    };\n  }\n\nexport default connect(mapStateToProps, { loginUser, setError })(Login);"]},"metadata":{},"sourceType":"module"}